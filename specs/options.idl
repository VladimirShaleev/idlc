@ Source code.
@ Used to provide source code in memory. [detail]
struct Source
    field Name {Str} @ Source name (used to resolve imports)
    field Data {Char} [const,array(Size)] @ Source code.
    field Size {Uint32} @ Size of {Data} in bytes.

@ Api version.
@ Used to set {Options.SetVersion} the API version. [detail]
struct ApiVersion
    field Major {Uint32} @ Major component of the version.
    field Minor {Uint32} @ Minor component of the version.
    field Micro {Uint32} @ Micro component of the version.

@ Callback to get sources.
@ Used to retrieve and compile sources from memory. [detail]
@ ```
    Should return the source if the file can be resolved, or null to indicate 
    to the compiler that it cannot resolve the source and should try to find 
    the source elsewhere (e.g. via import paths)``` [return]
@ If the callback allocates memory, then you can free it in the callback {ReleaseImportCallback}. [see]
callback ImportCallback {Source} [ref,optional]
    arg Name {Str} @ The name of the file that the compiler is trying to get (for example, when it encounters "import").
    arg Depth {Uint32} @ Current imports nesting level.
    arg Data {Data} [userdata] @ User data specified when setting up a callback.

@ Callback to release sources.
@ If {ImportCallback} allocated memory dynamically for the source, you can free it here. [detail]
@ {ImportCallback}. [see]
callback ReleaseImportCallback
    arg Source {Source} [ref] @ Source for release.
    arg Data {Data} [userdata] @ User data specified when setting up a callback.

@ Callback to which the compilation result is passed.
@ ```
    If you need to save the compilation result to a location other than the file 
    system, such as the network or console output, you can use this callback.``` [detail]
@ The compiler can output multiple sources. The exact number depends on the selected generator {Generator}. [note]
callback WriteCallback
    arg Source {Source} [const,ref] @ Source of compiler output.
    arg Data {Data} [userdata] @ User data specified when setting up a callback.

@ Compilation options.
@ This object specifies various compilation options. [detail]
interface Options
    prop DebugMode [get(GetDebugMode),set(SetDebugMode)] @ Setting debug compilation output to console.
    prop WarningsAsErrors [get(GetWarningsAsErrors),set(SetWarningsAsErrors)] @ Treat warnings as errors.
    prop OutputDir [get(GetOutputDir),set(SetOutputDir)] @ Output directory of the compilation result.
    prop ImportDirs [get(GetImportDirs),set(SetImportDirs)] @ Directories to search for files when importing.
    prop Additions [get(GetAdditions),set(SetAdditions)] @ Additional parameters (specific to each generator {Generator}).

    event Importer [get(GetImporter),set(SetImporter)] @ Events for receiving sources (for example, when importing).
    event ReleaseImport [get(GetReleaseImport),set(SetReleaseImport)] @ Event to release sources obtained from {Importer}.
    event Writer [get(GetWriter),set(SetWriter)] @ Event that occurs when the compiler outputs.

    @ Creates new options instance.
    @ Creates an object for setting compiler options. [detail]
    @ New options instance. [return]
    method Create {Result} [ctor]
        arg Options {Options} [result] @ New options instance.

    @ Increments reference count.
    @ Manages options instance lifetime. [detail]
    @ Reference to same options. [return]
    @ {Destroy} [see]
    method Reference {Options} [refinc]
        arg Options {Options} [this] @ Target options instance.

    @ Releases options instance.
    @ Destroys when reference count reaches zero. [detail]
    @ {Reference} [see]
    method Destroy [destroy]
        arg Options {Options} [this] @ Options to destroy.

    @ Get debug mode.
    @ Return *{True}* is debug mode enabled. [detail]
    @ *{True}* is enabled. [return]
    @ {SetDebugMode} [see]
    method GetDebugMode {Bool} [const]
        arg Options {Options} [this] @ Target options.

    @ Set debug mode.
    @ Setting debug compilation output to console. [detail]
    @ {GetDebugMode} [see]
    method SetDebugMode
        arg Options {Options} [this] @ Target options.
        arg Enable {Bool} @ Enable debug.

    @ Get warning handling setting.
    @ Return *{True}* if warnings are treated as errors. [detail]
    @ *{True}* is enabled. [return]
    @ {SetWarningsAsErrors} [see]
    method GetWarningsAsErrors {Bool} [const]
        arg Options {Options} [this] @ Target options.

    @ Set warning handling setting.
    @ Setting treat warnings as errors. [detail]
    @ {GetWarningsAsErrors} [see]
    method SetWarningsAsErrors
        arg Options {Options} [this] @ Target options.
        arg Enable {Bool} @ Enable treat warnings as errors.

    @ Get output directory.
    @ Returns the path that the compiler will use to save compilation output. [detail]
    @ Directory path. [return]
    @ {SetOutputDir} [see]
    method GetOutputDir {Str} [const]
        arg Options {Options} [this] @ Target options.

    @ Set output directory.
    @ Configure the path that the compiler will use to save compilation output. [detail]
    @ Compiler output to the file system does not occur if output via a {SetWriter} is configured. [note]
    @ {GetOutputDir} [see]
    method SetOutputDir
        arg Options {Options} [this] @ Target options.
        arg Dir {Str} @ Directory path.

    @ Returns an array of directories to search for imports.
    @ These paths are used to search source code when an import is encountered during compilation. [detail]
    @ Array of directories paths. [return]
    @ {SetImportDirs} [see]
    method GetImportDirs [const]
        arg Options {Options} [this] @ Target options.
        arg DirCount {Uint32} [in,out] @ Number of directories.
        arg Dirs {Str} [result,array(DirCount)] @ Import directories.

    @ Configures directories to search for source files.
    @ These paths are used to search source code when an import is encountered during compilation. [detail]
    @ ```
        These paths are used when resolving imports if the callback passed to {SetImporter} 
        did not return a source (if {SetImporter} was configured)``` [note]
    @ {GetImportDirs} [see]
    method SetImportDirs
        arg Options {Options} [this] @ Target options.
        arg DirCount {Uint32} @ Number of directories.
        arg Dirs {Str} [const,array(DirCount)] @ Import directories.

    @ Get the current import callback.
    @ Returns a callback if one has been configured. [detail]
    @ Returns a callback. [return]
    @ {SetImporter} [see]
    method GetImporter {ImportCallback} [const]
        arg Options {Options} [this] @ Target options.
        arg Data {Data} [out,optional,userdata] @ Returning a callback user data pointer (may be null).

    @ Set import callback.
    @ Used to resolve code sources, such as when the compiler encounters imports. [detail]
    @ ```
        If set, the importer will be used to resolve sources as the highest 
        priority (then the sources passed to {Compiler.Compile} in the {Compiler.Compile.Sources} 
        argument will be used, then the directories passed to {SetImportDirs} will be used, 
        and then the current working directory).``` [note]
    @ ```
        If {Compiler.Compile.File} was not passed to {Compiler.Compile} to compile from the file system, 
        then the importer will also be used to obtain the main (primary) file named *<input>*.``` [note]
    @ A typical use of an importer is to read source code from memory. [note]
    @ {GetImporter} [see]
    method SetImporter
        arg Options {Options} [this] @ Target options.
        arg Callback {ImportCallback} @ Callback function.
        arg Data {Data} [optional,userdata] @ Callback user data.

    @ Get the current release import callback.
    @ Callback for releasing sources allocated via {SetImporter}. [detail]
    @ Returns a callback. [return]
    @ {SetReleaseImport} [see]
    method GetReleaseImport {ReleaseImportCallback} [const]
        arg Options {Options} [this] @ Target options.
        arg Data {Data} [out,optional,userdata] @ Returning a callback user data pointer (may be null).

    @ Set release import callback.
    @ ```
        If the callback set in {SetImporter} allocates data on the heap or creates 
        any resources, they can be freed by the callback set here.``` [detail]
    @ {GetReleaseImport} [see]
    method SetReleaseImport
        arg Options {Options} [this] @ Target options.
        arg Callback {ReleaseImportCallback} @ Callback function.
        arg Data {Data} [optional,userdata] @ Callback user data.

    @ Get the current write callback.
    @ Returns a callback if one has been configured. [detail]
    @ Returns a callback. [return]
    @ {SetWriter} [see]
    method GetWriter {WriteCallback} [const]
        arg Options {Options} [this] @ Target options.
        arg Data {Data} [out,optional,userdata] @ Returning a callback user data pointer (may be null).

    @ Set write callback.
    @ ```
        Configures a callback to receive compiler output. If the callback is set, no output 
        will be made to the file system ({SetOutputDir} will also not be used).``` [detail]
    @ Typical uses of a writer are writing to memory or outputting to the console and the like. [note]
    @ {GetWriter} [see]
    method SetWriter
        arg Options {Options} [this] @ Target options.
        arg Callback {WriteCallback} @ Callback function.
        arg Data {Data} [optional,userdata] @ Callback user data.

    @ Get additional parameters.
    @ Returns an array of additional parameters. [detail]
    @ Parameter array. [return]
    @ {SetAdditions} [see]
    method GetAdditions [const]
        arg Options {Options} [this] @ Target options.
        arg AdditionCount {Uint32} [in,out] @ Number of additions.
        arg Additions {Str} [result,array(AdditionCount)] @ Additions.

    @ Set additional parameters.
    @ Sets additional parameters specific to the generator ({Generator}). [detail]
    @ ```
        Supported Generators:
        - {Generator.C} - additional headers included in the API header file;
        - {Generator.JavaScript} - no specific parameters.
        ``` [note]
    @ {GetAdditions} [see]
    method SetAdditions
        arg Options {Options} [this] @ Target options.
        arg AdditionCount {Uint32} @ Number of additions.
        arg Additions {Str} [const,array(AdditionCount)] @ Additions.

    @ Get api version.
    @ Returns the API version or null. [detail]
    @ {SetVersion} [see]
    method GetVersion {ApiVersion} [const,ref,optional]
        arg Options {Options} [this] @ Target options.

    @ Set api version.
    @ Sets the API version that will be saved in the compiler output. [detail]
    @ ```
        If not set, then the API version will be taken from the `\[version(major,minor,micro)\]` 
        attribute (sample: `api Sample \[version(2,3,1)\]`). If the api does not have a version 
        attribute specified, then the version will be taken as `0.0.0`.``` [note]
    @ {GetVersion} [see]
    method SetVersion
        arg Options {Options} [this] @ Target options.
        arg Version {ApiVersion} [const,ref,optional] @ Api version.
